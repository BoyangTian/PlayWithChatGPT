"""
Django settings for authsite project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from dotenv import dotenv_values
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
env_vars = dotenv_values("authsite.env")
SECRET_KEY = env_vars["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth', # Core authentication framework and its default models.
    'django.contrib.contenttypes', # Django content type system (allows permissions to be associated with models).
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Add our new application
    'catalog.apps.CatalogConfig', #This object was created for us in /catalog/apps.py
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Manages sessions across requests
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Associates users with requests using sessions.
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'authsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        # The setting of 'APP_DIRS': True, is the most important, as it tells Django to search for 
        # templates in a subdirectory of each application in the project, named "templates" 
        # (this makes it easier to group templates with their associated application for easy re-use).
        # We still need to set this to True for "admin" page
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'authsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': "authsite",
        "USER": "admin_authsite",
        "PASSWORD": env_vars["POSTGRES_PASSWORD"],
        "HOST": env_vars["DB_HOST"],
        # "HOST": "postgres-authsite",
        "PORT": "5433",
        "TIME_ZONE": "UTC",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# We can also get static files from CDN:
# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Home_page

STATIC_URL = 'static/'

# https://docs.djangoproject.com/en/4.2/intro/tutorial06/
# Django’s STATICFILES_FINDERS setting contains a list of finders that know how to discover static
# files from various sources. One of the defaults is AppDirectoriesFinder which looks for a “static”
# subdirectory in each of the INSTALLED_APPS, like the one in polls we just created.
# The admin site uses the same directory structure for its static files.
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Sessions
# Note: You can change the behavior so the site will update the database/send cookie on every 
# request by adding SESSION_SAVE_EVERY_REQUEST = True into your project settings

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'

# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Authentication
# Note: The password reset system requires that your website supports email, 
# which is beyond the scope of this article, so this part won't work yet. 
# To allow testing, put the following line at the end of your settings.py file. 
# This logs any emails sent to the console (so you can copy the password reset link 
# from the console).
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
